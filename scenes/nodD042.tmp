[gd_scene load_steps=2 format=3 uid="uid://bfi6ild6gmsu8"]

[sub_resource type="GDScript" id="GDScript_mkqwk"]
script/source = "extends Node2D


# Called when the node enters the scene tree for the first time.
func _ready():
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta):
	pass


func _on_start_button_pressed():
	#DirAccess.remove_absolute('res://data.db')
	var database = SQLite.new()
	database.path = 'res://data.db'
	database.open_db()
	var table1 = {
		\"id\": {\"data_type\":\"int\", \"primary_key\": true, \"not_null\": true, \"auto_increment\": true},
		\"name\": {\"data_type\": \"text\"},
		\"description\": {\"data_type\": \"text\"},
		\"image\": {\"data_type\": \"text\"},
		\"rarity\": {\"data_type\": \"int\"},
		\"manacost\": {\"data_type\": \"int\"},
		\"attack\": {\"data_type\": \"int\"},
		\"hp\": {\"data_type\": \"int\"},
		\"in_colletion\": {\"data_type\": \"bool\", \"default\": false},
		\"in_deck\": {\"data_type\": \"bool\", \"default\": false},
	}
	database.drop_table(\"CardDataBase\")
	#database.create_table(\"CardDataBase\", table1)
	#database.insert_rows(\"CardDataBase\", 
		#[arr_to_dict(['Killer', 'Deal a great damage', 'Killer.png', AbstractCard.Rarity.Common, 2, 5, 1]),
		#arr_to_dict(['Warrior', 'Nothing', 'Warrior.png', AbstractCard.Rarity.Rare, 2, 3, 4]),
		#arr_to_dict(['Spirit', '', 'Spirit.webp', AbstractCard.Rarity.Epic, 5, 7, 7]),
		#arr_to_dict(['Shadow', '', 'ShadowWarrior.png', AbstractCard.Rarity.Rare, 6, 6, 6]),
		#arr_to_dict(['Dragon', '', 'Dragon.webp', AbstractCard.Rarity.Legendary, 8, 10, 10]),
		#arr_to_dict(['Baby dragon', '', 'DragonBaby.webp', AbstractCard.Rarity.Common, 1, 1, 2]),
		#arr_to_dict(['Druid', '', 'Druid.webp', AbstractCard.Rarity.Rare, 2, 3, 2]),
		#arr_to_dict(['Lion', '', 'Lion.webp', AbstractCard.Rarity.Rare, 4, 4, 4]),
		#arr_to_dict(['Owl', '', 'Owl.webp', AbstractCard.Rarity.Common, 1, 2, 1]),
		#arr_to_dict(['Demon', '', 'DemonKnight.webp', AbstractCard.Rarity.Epic, 3, 4, 3])])
	#print(database.select_rows(\"CardDataBase\", \"attack>5 and hp>5\", [\"name\"]))
	#database.update_rows(\"CardDataBase\", \"id==1 or id==2\", {\"in_deck\": true})
	#get_tree().change_scene_to_file(\"res://scenes/map.tscn\")

func arr_to_dict(arr: Array) -> Dictionary:
	return {\"name\": arr[0], \"description\": arr[1],
			\"image\": arr[2], \"rarity\": arr[3],
			\"manacost\": arr[4], \"attack\": arr[5],
			\"hp\": arr[6]}

func _on_exit_button_pressed():
	get_tree().quit()



"

[node name="Node2D" type="Node2D"]
script = SubResource("GDScript_mkqwk")

[node name="MarginContainer" type="MarginContainer" parent="."]
custom_minimum_size = Vector2(500, 1080)
offset_left = 710.0
offset_right = 1210.0
offset_bottom = 1080.0

[node name="VBoxContainer" type="VBoxContainer" parent="MarginContainer"]
layout_mode = 2
alignment = 1

[node name="StartButton" type="Button" parent="MarginContainer/VBoxContainer"]
custom_minimum_size = Vector2(0, 100)
layout_mode = 2
focus_mode = 0
theme_override_font_sizes/font_size = 40
text = "Начать"

[node name="MarginContainer2" type="MarginContainer" parent="MarginContainer/VBoxContainer"]
custom_minimum_size = Vector2(0, 30)
layout_mode = 2

[node name="ExitButton" type="Button" parent="MarginContainer/VBoxContainer"]
custom_minimum_size = Vector2(0, 100)
layout_mode = 2
focus_mode = 0
theme_override_font_sizes/font_size = 40
text = "Выход"

[connection signal="pressed" from="MarginContainer/VBoxContainer/StartButton" to="." method="_on_start_button_pressed"]
[connection signal="pressed" from="MarginContainer/VBoxContainer/ExitButton" to="." method="_on_exit_button_pressed"]
